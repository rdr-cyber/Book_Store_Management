{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/rajde/OneDrive/Desktop/Book_Store_Management/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\nimport { createBrowserClient } from '@supabase/ssr';\r\n\r\n// Get environment variables with fallbacks\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co';\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key';\r\n\r\n// Validate that we have proper Supabase configuration\r\nconst isValidSupabaseConfig = \r\n  supabaseUrl !== 'your_supabase_project_url' && \r\n  supabaseUrl !== 'https://placeholder.supabase.co' &&\r\n  supabaseAnonKey !== 'your_supabase_anon_key' && \r\n  supabaseAnonKey !== 'placeholder-key' &&\r\n  supabaseUrl.startsWith('https://') &&\r\n  supabaseUrl.includes('.supabase.co');\r\n\r\n// Create a mock client for development when Supabase is not configured\r\nconst createMockClient = () => ({\r\n  auth: {\r\n    signUp: () => Promise.resolve({ data: null, error: new Error('Supabase not configured') }),\r\n    signInWithPassword: () => Promise.resolve({ data: null, error: new Error('Supabase not configured') }),\r\n    signOut: () => Promise.resolve({ error: null }),\r\n    getUser: () => Promise.resolve({ data: { user: null }, error: null }),\r\n    onAuthStateChange: (callback: Function) => {\r\n      // Return a mock subscription\r\n      return { data: { subscription: { unsubscribe: () => {} } } };\r\n    },\r\n  },\r\n  from: (table: string) => ({\r\n    select: () => ({\r\n      eq: () => ({\r\n        single: () => Promise.resolve({ data: null, error: new Error('Supabase not configured') }),\r\n        order: () => Promise.resolve({ data: [], error: null }),\r\n      }),\r\n      order: () => Promise.resolve({ data: [], error: null }),\r\n    }),\r\n    insert: () => ({\r\n      select: () => ({\r\n        single: () => Promise.resolve({ data: null, error: new Error('Supabase not configured') }),\r\n      }),\r\n    }),\r\n    update: () => ({\r\n      eq: () => Promise.resolve({ error: new Error('Supabase not configured') }),\r\n    }),\r\n    delete: () => ({\r\n      eq: () => Promise.resolve({ error: new Error('Supabase not configured') }),\r\n    }),\r\n  }),\r\n  rpc: () => Promise.resolve({ error: new Error('Supabase not configured') }),\r\n});\r\n\r\n// Client-side Supabase client\r\nexport const supabase = (() => {\r\n  if (isValidSupabaseConfig) {\r\n    return createClient(supabaseUrl, supabaseAnonKey);\r\n  }\r\n  return createMockClient();\r\n})();\r\n\r\n// Browser client for SSR\r\nexport const createSupabaseBrowserClient = () => {\r\n  if (isValidSupabaseConfig) {\r\n    return createBrowserClient(supabaseUrl, supabaseAnonKey);\r\n  }\r\n  return createMockClient();\r\n};\r\n\r\n// Export configuration status\r\nexport const isSupabaseConfigured = isValidSupabaseConfig;\r\n\r\n// Database Tables Schema Types\r\nexport type Database = {\r\n  public: {\r\n    Tables: {\r\n      users: {\r\n        Row: {\r\n          id: string;\r\n          email: string;\r\n          first_name: string;\r\n          last_name: string;\r\n          role: 'reader' | 'author' | 'admin';\r\n          avatar_url?: string;\r\n          bio?: string;\r\n          created_at: string;\r\n          updated_at: string;\r\n          is_active: boolean;\r\n          // Author specific\r\n          author_verified?: boolean;\r\n          total_books?: number;\r\n          total_sales?: number;\r\n          total_revenue?: number;\r\n          // Reader specific\r\n          followed_authors?: string[];\r\n          purchased_books?: string[];\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          email: string;\r\n          first_name: string;\r\n          last_name: string;\r\n          role: 'reader' | 'author' | 'admin';\r\n          avatar_url?: string;\r\n          bio?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          is_active?: boolean;\r\n          author_verified?: boolean;\r\n          total_books?: number;\r\n          total_sales?: number;\r\n          total_revenue?: number;\r\n          followed_authors?: string[];\r\n          purchased_books?: string[];\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          email?: string;\r\n          first_name?: string;\r\n          last_name?: string;\r\n          role?: 'reader' | 'author' | 'admin';\r\n          avatar_url?: string;\r\n          bio?: string;\r\n          updated_at?: string;\r\n          is_active?: boolean;\r\n          author_verified?: boolean;\r\n          total_books?: number;\r\n          total_sales?: number;\r\n          total_revenue?: number;\r\n          followed_authors?: string[];\r\n          purchased_books?: string[];\r\n        };\r\n      };\r\n      books: {\r\n        Row: {\r\n          id: string;\r\n          title: string;\r\n          author_name: string;\r\n          author_id: string;\r\n          price: number;\r\n          image_url?: string;\r\n          description: string;\r\n          category: string;\r\n          cover_type: string;\r\n          stock: number;\r\n          reorder_point: number;\r\n          book_file_url?: string;\r\n          published_at: string;\r\n          updated_at: string;\r\n          sales: number;\r\n          revenue: number;\r\n          average_rating: number;\r\n          total_reviews: number;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          title: string;\r\n          author_name: string;\r\n          author_id: string;\r\n          price: number;\r\n          image_url?: string;\r\n          description: string;\r\n          category: string;\r\n          cover_type: string;\r\n          stock: number;\r\n          reorder_point: number;\r\n          book_file_url?: string;\r\n          published_at?: string;\r\n          updated_at?: string;\r\n          sales?: number;\r\n          revenue?: number;\r\n          average_rating?: number;\r\n          total_reviews?: number;\r\n        };\r\n        Update: {\r\n          title?: string;\r\n          author_name?: string;\r\n          price?: number;\r\n          image_url?: string;\r\n          description?: string;\r\n          category?: string;\r\n          cover_type?: string;\r\n          stock?: number;\r\n          reorder_point?: number;\r\n          book_file_url?: string;\r\n          updated_at?: string;\r\n          sales?: number;\r\n          revenue?: number;\r\n          average_rating?: number;\r\n          total_reviews?: number;\r\n        };\r\n      };\r\n      orders: {\r\n        Row: {\r\n          id: string;\r\n          user_id: string;\r\n          books: any;\r\n          total_amount: number;\r\n          status: string;\r\n          payment_method: string;\r\n          payment_gateway: string;\r\n          payment_id?: string;\r\n          order_id?: string;\r\n          created_at: string;\r\n          completed_at?: string;\r\n          shipping_address?: any;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          user_id: string;\r\n          books: any;\r\n          total_amount: number;\r\n          status: string;\r\n          payment_method: string;\r\n          payment_gateway: string;\r\n          payment_id?: string;\r\n          order_id?: string;\r\n          created_at?: string;\r\n          completed_at?: string;\r\n          shipping_address?: any;\r\n        };\r\n        Update: {\r\n          status?: string;\r\n          payment_id?: string;\r\n          completed_at?: string;\r\n        };\r\n      };\r\n      reviews: {\r\n        Row: {\r\n          id: string;\r\n          book_id: string;\r\n          user_id: string;\r\n          username: string;\r\n          rating: number;\r\n          comment: string;\r\n          created_at: string;\r\n          author_reply?: string;\r\n          reader_follow_up?: string;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          book_id: string;\r\n          user_id: string;\r\n          username: string;\r\n          rating: number;\r\n          comment: string;\r\n          created_at?: string;\r\n          author_reply?: string;\r\n          reader_follow_up?: string;\r\n        };\r\n        Update: {\r\n          rating?: number;\r\n          comment?: string;\r\n          author_reply?: string;\r\n          reader_follow_up?: string;\r\n        };\r\n      };\r\n      follows: {\r\n        Row: {\r\n          id: string;\r\n          reader_id: string;\r\n          author_id: string;\r\n          followed_at: string;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          reader_id: string;\r\n          author_id: string;\r\n          followed_at?: string;\r\n        };\r\n        Update: {};\r\n      };\r\n    };\r\n  };\r\n};\r\n\r\nexport default supabase;"],"names":[],"mappings":";;;;;;AACA;;;AAEA,2CAA2C;AAC3C,MAAM,cAAc,iEAAwC;AAC5D,MAAM,kBAAkB,8DAA6C;AAErE,sDAAsD;AACtD,MAAM,wBACJ,gBAAgB,+BAChB,gBAAgB,qCAChB,oBAAoB,4BACpB,oBAAoB,qBACpB,YAAY,UAAU,CAAC,eACvB,YAAY,QAAQ,CAAC;AAEvB,uEAAuE;AACvE,MAAM,mBAAmB,IAAM,CAAC;QAC9B,MAAM;YACJ,QAAQ,IAAM,QAAQ,OAAO,CAAC;oBAAE,MAAM;oBAAM,OAAO,IAAI,MAAM;gBAA2B;YACxF,oBAAoB,IAAM,QAAQ,OAAO,CAAC;oBAAE,MAAM;oBAAM,OAAO,IAAI,MAAM;gBAA2B;YACpG,SAAS,IAAM,QAAQ,OAAO,CAAC;oBAAE,OAAO;gBAAK;YAC7C,SAAS,IAAM,QAAQ,OAAO,CAAC;oBAAE,MAAM;wBAAE,MAAM;oBAAK;oBAAG,OAAO;gBAAK;YACnE,mBAAmB,CAAC;gBAClB,6BAA6B;gBAC7B,OAAO;oBAAE,MAAM;wBAAE,cAAc;4BAAE,aAAa,KAAO;wBAAE;oBAAE;gBAAE;YAC7D;QACF;QACA,MAAM,CAAC,QAAkB,CAAC;gBACxB,QAAQ,IAAM,CAAC;wBACb,IAAI,IAAM,CAAC;gCACT,QAAQ,IAAM,QAAQ,OAAO,CAAC;wCAAE,MAAM;wCAAM,OAAO,IAAI,MAAM;oCAA2B;gCACxF,OAAO,IAAM,QAAQ,OAAO,CAAC;wCAAE,MAAM,EAAE;wCAAE,OAAO;oCAAK;4BACvD,CAAC;wBACD,OAAO,IAAM,QAAQ,OAAO,CAAC;gCAAE,MAAM,EAAE;gCAAE,OAAO;4BAAK;oBACvD,CAAC;gBACD,QAAQ,IAAM,CAAC;wBACb,QAAQ,IAAM,CAAC;gCACb,QAAQ,IAAM,QAAQ,OAAO,CAAC;wCAAE,MAAM;wCAAM,OAAO,IAAI,MAAM;oCAA2B;4BAC1F,CAAC;oBACH,CAAC;gBACD,QAAQ,IAAM,CAAC;wBACb,IAAI,IAAM,QAAQ,OAAO,CAAC;gCAAE,OAAO,IAAI,MAAM;4BAA2B;oBAC1E,CAAC;gBACD,QAAQ,IAAM,CAAC;wBACb,IAAI,IAAM,QAAQ,OAAO,CAAC;gCAAE,OAAO,IAAI,MAAM;4BAA2B;oBAC1E,CAAC;YACH,CAAC;QACD,KAAK,IAAM,QAAQ,OAAO,CAAC;gBAAE,OAAO,IAAI,MAAM;YAA2B;IAC3E,CAAC;AAGM,MAAM,WAAW,CAAC;IACvB,uCAA2B;;IAE3B;IACA,OAAO;AACT,CAAC;AAGM,MAAM,8BAA8B;IACzC,uCAA2B;;IAE3B;IACA,OAAO;AACT;AAGO,MAAM,uBAAuB;uCA8MrB","debugId":null}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/rajde/OneDrive/Desktop/Book_Store_Management/src/lib/database.ts"],"sourcesContent":["import { supabase, isSupabaseConfigured } from './supabase';\r\nimport { \r\n  User, \r\n  Book, \r\n  Order, \r\n  Review, \r\n  Follow, \r\n  Transaction, \r\n  AuthorAnalytics, \r\n  ReviewConversation \r\n} from './types';\r\n\r\n// In-memory storage for development when Supabase is not configured\r\nlet mockUsers: User[] = [];\r\nlet mockBooks: Book[] = [];\r\nlet mockOrders: Order[] = [];\r\nlet mockReviews: Review[] = [];\r\nlet mockFollows: Follow[] = [];\r\n\r\n// Helper function to generate mock IDs\r\nconst generateMockId = () => `mock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n// User Management\r\nexport const createUser = async (userData: Omit<User, 'id'>) => {\r\n  try {\r\n    if (!isSupabaseConfigured) {\r\n      // Mock implementation\r\n      const mockUser: User = {\r\n        id: generateMockId(),\r\n        ...userData,\r\n        createdAt: new Date(),\r\n      };\r\n      mockUsers.push(mockUser);\r\n      return mockUser.id;\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('users')\r\n      .insert({\r\n        email: userData.email,\r\n        first_name: userData.firstName,\r\n        last_name: userData.lastName,\r\n        role: userData.role,\r\n        avatar_url: userData.avatarUrl,\r\n        bio: userData.bio,\r\n        is_active: true,\r\n        followed_authors: userData.role === 'reader' ? [] : undefined,\r\n        purchased_books: userData.role === 'reader' ? [] : undefined,\r\n        author_verified: userData.role === 'author' ? false : undefined,\r\n        total_books: userData.role === 'author' ? 0 : undefined,\r\n        total_sales: userData.role === 'author' ? 0 : undefined,\r\n        total_revenue: userData.role === 'author' ? 0 : undefined,\r\n      })\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    return data.id;\r\n  } catch (error) {\r\n    console.error('Error creating user:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getUserByEmail = async (email: string): Promise<User | null> => {\r\n  try {\r\n    if (!isSupabaseConfigured) {\r\n      // Mock implementation\r\n      const user = mockUsers.find(u => u.email === email);\r\n      return user || null;\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('users')\r\n      .select('*')\r\n      .eq('email', email)\r\n      .single();\r\n    \r\n    if (error && error.code !== 'PGRST116') throw error;\r\n    if (!data) return null;\r\n    \r\n    return {\r\n      id: data.id,\r\n      firstName: data.first_name,\r\n      lastName: data.last_name,\r\n      email: data.email,\r\n      role: data.role,\r\n      avatarUrl: data.avatar_url,\r\n      bio: data.bio,\r\n      createdAt: data.created_at,\r\n      isActive: data.is_active,\r\n      followedAuthors: data.followed_authors,\r\n      purchasedBooks: data.purchased_books,\r\n      authorVerified: data.author_verified,\r\n      totalBooks: data.total_books,\r\n      totalSales: data.total_sales,\r\n      totalRevenue: data.total_revenue,\r\n    } as User;\r\n  } catch (error) {\r\n    console.error('Error getting user by email:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getUserById = async (userId: string): Promise<User | null> => {\r\n  try {\r\n    if (!isSupabaseConfigured) {\r\n      // Mock implementation\r\n      const user = mockUsers.find(u => u.id === userId);\r\n      return user || null;\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('users')\r\n      .select('*')\r\n      .eq('id', userId)\r\n      .single();\r\n    \r\n    if (error && error.code !== 'PGRST116') throw error;\r\n    if (!data) return null;\r\n    \r\n    return {\r\n      id: data.id,\r\n      firstName: data.first_name,\r\n      lastName: data.last_name,\r\n      email: data.email,\r\n      role: data.role,\r\n      avatarUrl: data.avatar_url,\r\n      bio: data.bio,\r\n      createdAt: data.created_at,\r\n      isActive: data.is_active,\r\n      followedAuthors: data.followed_authors,\r\n      purchasedBooks: data.purchased_books,\r\n      authorVerified: data.author_verified,\r\n      totalBooks: data.total_books,\r\n      totalSales: data.total_sales,\r\n      totalRevenue: data.total_revenue,\r\n    } as User;\r\n  } catch (error) {\r\n    console.error('Error getting user by ID:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateUser = async (userId: string, updates: Partial<User>) => {\r\n  try {\r\n    const updateData: any = {};\r\n    if (updates.firstName) updateData.first_name = updates.firstName;\r\n    if (updates.lastName) updateData.last_name = updates.lastName;\r\n    if (updates.email) updateData.email = updates.email;\r\n    if (updates.role) updateData.role = updates.role;\r\n    if (updates.avatarUrl) updateData.avatar_url = updates.avatarUrl;\r\n    if (updates.bio) updateData.bio = updates.bio;\r\n    if (updates.isActive !== undefined) updateData.is_active = updates.isActive;\r\n    if (updates.followedAuthors) updateData.followed_authors = updates.followedAuthors;\r\n    if (updates.purchasedBooks) updateData.purchased_books = updates.purchasedBooks;\r\n    if (updates.authorVerified !== undefined) updateData.author_verified = updates.authorVerified;\r\n    if (updates.totalBooks !== undefined) updateData.total_books = updates.totalBooks;\r\n    if (updates.totalSales !== undefined) updateData.total_sales = updates.totalSales;\r\n    if (updates.totalRevenue !== undefined) updateData.total_revenue = updates.totalRevenue;\r\n    \r\n    updateData.updated_at = new Date().toISOString();\r\n    \r\n    const { error } = await supabase\r\n      .from('users')\r\n      .update(updateData)\r\n      .eq('id', userId);\r\n    \r\n    if (error) throw error;\r\n  } catch (error) {\r\n    console.error('Error updating user:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Book Management\r\nexport const createBook = async (bookData: Omit<Book, 'id'>) => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('books')\r\n      .insert({\r\n        title: bookData.title,\r\n        author_name: bookData.authorName,\r\n        author_id: bookData.authorId,\r\n        price: bookData.price,\r\n        image_url: bookData.imageUrl,\r\n        description: bookData.description,\r\n        category: bookData.category,\r\n        cover_type: bookData.coverType,\r\n        stock: bookData.stock,\r\n        reorder_point: bookData.reorderPoint,\r\n        book_file_url: bookData.bookFileUrl,\r\n        sales: 0,\r\n        revenue: 0,\r\n        average_rating: 0,\r\n        total_reviews: 0,\r\n      })\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    \r\n    // Update author's book count\r\n    const { error: updateError } = await supabase.rpc('increment_user_books', {\r\n      user_id: bookData.authorId\r\n    });\r\n    \r\n    if (updateError) {\r\n      // Fallback: manually update\r\n      const { data: userData } = await supabase\r\n        .from('users')\r\n        .select('total_books')\r\n        .eq('id', bookData.authorId)\r\n        .single();\r\n      \r\n      await supabase\r\n        .from('users')\r\n        .update({ total_books: (userData?.total_books || 0) + 1 })\r\n        .eq('id', bookData.authorId);\r\n    }\r\n    \r\n    return data.id;\r\n  } catch (error) {\r\n    console.error('Error creating book:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getBooksByAuthor = async (authorId: string): Promise<Book[]> => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('books')\r\n      .select('*')\r\n      .eq('author_id', authorId)\r\n      .order('published_at', { ascending: false });\r\n    \r\n    if (error) throw error;\r\n    \r\n    return (data || []).map(book => ({\r\n      id: book.id,\r\n      title: book.title,\r\n      authorName: book.author_name,\r\n      authorId: book.author_id,\r\n      price: book.price,\r\n      imageUrl: book.image_url,\r\n      description: book.description,\r\n      category: book.category,\r\n      coverType: book.cover_type,\r\n      stock: book.stock,\r\n      reorderPoint: book.reorder_point,\r\n      bookFileUrl: book.book_file_url,\r\n      publishedAt: book.published_at,\r\n      sales: book.sales,\r\n      revenue: book.revenue,\r\n      averageRating: book.average_rating,\r\n      totalReviews: book.total_reviews,\r\n    } as Book));\r\n  } catch (error) {\r\n    console.error('Error getting books by author:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getAllBooks = async (): Promise<Book[]> => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('books')\r\n      .select('*')\r\n      .order('published_at', { ascending: false });\r\n    \r\n    if (error) throw error;\r\n    \r\n    return (data || []).map(book => ({\r\n      id: book.id,\r\n      title: book.title,\r\n      authorName: book.author_name,\r\n      authorId: book.author_id,\r\n      price: book.price,\r\n      imageUrl: book.image_url,\r\n      description: book.description,\r\n      category: book.category,\r\n      coverType: book.cover_type,\r\n      stock: book.stock,\r\n      reorderPoint: book.reorder_point,\r\n      bookFileUrl: book.book_file_url,\r\n      publishedAt: book.published_at,\r\n      sales: book.sales,\r\n      revenue: book.revenue,\r\n      averageRating: book.average_rating,\r\n      totalReviews: book.total_reviews,\r\n    } as Book));\r\n  } catch (error) {\r\n    console.error('Error getting all books:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getBookById = async (bookId: string): Promise<Book | null> => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('books')\r\n      .select('*')\r\n      .eq('id', bookId)\r\n      .single();\r\n    \r\n    if (error && error.code !== 'PGRST116') throw error;\r\n    if (!data) return null;\r\n    \r\n    return {\r\n      id: data.id,\r\n      title: data.title,\r\n      authorName: data.author_name,\r\n      authorId: data.author_id,\r\n      price: data.price,\r\n      imageUrl: data.image_url,\r\n      description: data.description,\r\n      category: data.category,\r\n      coverType: data.cover_type,\r\n      stock: data.stock,\r\n      reorderPoint: data.reorder_point,\r\n      bookFileUrl: data.book_file_url,\r\n      publishedAt: data.published_at,\r\n      sales: data.sales,\r\n      revenue: data.revenue,\r\n      averageRating: data.average_rating,\r\n      totalReviews: data.total_reviews,\r\n    } as Book;\r\n  } catch (error) {\r\n    console.error('Error getting book by ID:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateBook = async (bookId: string, updates: Partial<Book>) => {\r\n  try {\r\n    const updateData: any = {};\r\n    if (updates.title) updateData.title = updates.title;\r\n    if (updates.authorName) updateData.author_name = updates.authorName;\r\n    if (updates.price !== undefined) updateData.price = updates.price;\r\n    if (updates.imageUrl) updateData.image_url = updates.imageUrl;\r\n    if (updates.description) updateData.description = updates.description;\r\n    if (updates.category) updateData.category = updates.category;\r\n    if (updates.coverType) updateData.cover_type = updates.coverType;\r\n    if (updates.stock !== undefined) updateData.stock = updates.stock;\r\n    if (updates.reorderPoint !== undefined) updateData.reorder_point = updates.reorderPoint;\r\n    if (updates.bookFileUrl) updateData.book_file_url = updates.bookFileUrl;\r\n    if (updates.sales !== undefined) updateData.sales = updates.sales;\r\n    if (updates.revenue !== undefined) updateData.revenue = updates.revenue;\r\n    if (updates.averageRating !== undefined) updateData.average_rating = updates.averageRating;\r\n    if (updates.totalReviews !== undefined) updateData.total_reviews = updates.totalReviews;\r\n    \r\n    updateData.updated_at = new Date().toISOString();\r\n    \r\n    const { error } = await supabase\r\n      .from('books')\r\n      .update(updateData)\r\n      .eq('id', bookId);\r\n    \r\n    if (error) throw error;\r\n  } catch (error) {\r\n    console.error('Error updating book:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Order Management\r\nexport const createOrder = async (orderData: Omit<Order, 'id'>) => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('orders')\r\n      .insert({\r\n        user_id: orderData.userId,\r\n        books: orderData.books,\r\n        total_amount: orderData.totalAmount,\r\n        status: orderData.status,\r\n        payment_method: orderData.paymentMethod,\r\n        payment_gateway: orderData.paymentGateway,\r\n        payment_id: orderData.paymentId,\r\n        order_id: orderData.orderId,\r\n        shipping_address: orderData.shippingAddress,\r\n      })\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    return data.id;\r\n  } catch (error) {\r\n    console.error('Error creating order:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateOrderStatus = async (orderId: string, status: Order['status'], paymentId?: string) => {\r\n  try {\r\n    const updates: any = { status };\r\n    if (paymentId) {\r\n      updates.payment_id = paymentId;\r\n    }\r\n    if (status === 'completed') {\r\n      updates.completed_at = new Date().toISOString();\r\n    }\r\n    \r\n    const { error } = await supabase\r\n      .from('orders')\r\n      .update(updates)\r\n      .eq('id', orderId);\r\n    \r\n    if (error) throw error;\r\n    \r\n    // If order is completed, update book sales and user purchased books\r\n    if (status === 'completed') {\r\n      const { data: order } = await supabase\r\n        .from('orders')\r\n        .select('*')\r\n        .eq('id', orderId)\r\n        .single();\r\n      \r\n      if (order) {\r\n        // Update each book's sales and revenue\r\n        for (const item of order.books) {\r\n          const { data: book } = await supabase\r\n            .from('books')\r\n            .select('sales, revenue, stock, author_id')\r\n            .eq('id', item.bookId)\r\n            .single();\r\n          \r\n          if (book) {\r\n            await supabase\r\n              .from('books')\r\n              .update({\r\n                sales: (book.sales || 0) + item.quantity,\r\n                revenue: (book.revenue || 0) + (item.price * item.quantity),\r\n                stock: (book.stock || 0) - item.quantity\r\n              })\r\n              .eq('id', item.bookId);\r\n            \r\n            // Update author stats\r\n            const { data: author } = await supabase\r\n              .from('users')\r\n              .select('total_sales, total_revenue')\r\n              .eq('id', book.author_id)\r\n              .single();\r\n            \r\n            if (author) {\r\n              await supabase\r\n                .from('users')\r\n                .update({\r\n                  total_sales: (author.total_sales || 0) + item.quantity,\r\n                  total_revenue: (author.total_revenue || 0) + (item.price * item.quantity)\r\n                })\r\n                .eq('id', book.author_id);\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Update user's purchased books\r\n        const purchasedBookIds = order.books.map((item: any) => item.bookId);\r\n        const { data: user } = await supabase\r\n          .from('users')\r\n          .select('purchased_books')\r\n          .eq('id', order.user_id)\r\n          .single();\r\n        \r\n        if (user) {\r\n          const updatedPurchasedBooks = [...(user.purchased_books || []), ...purchasedBookIds];\r\n          await supabase\r\n            .from('users')\r\n            .update({ purchased_books: updatedPurchasedBooks })\r\n            .eq('id', order.user_id);\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating order status:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getUserOrders = async (userId: string): Promise<Order[]> => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('orders')\r\n      .select('*')\r\n      .eq('user_id', userId)\r\n      .order('created_at', { ascending: false });\r\n    \r\n    if (error) throw error;\r\n    \r\n    return (data || []).map(order => ({\r\n      id: order.id,\r\n      userId: order.user_id,\r\n      books: order.books,\r\n      totalAmount: order.total_amount,\r\n      status: order.status,\r\n      paymentMethod: order.payment_method,\r\n      paymentGateway: order.payment_gateway,\r\n      paymentId: order.payment_id,\r\n      orderId: order.order_id,\r\n      createdAt: order.created_at,\r\n      completedAt: order.completed_at,\r\n      shippingAddress: order.shipping_address,\r\n    } as Order));\r\n  } catch (error) {\r\n    console.error('Error getting user orders:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Review Management\r\nexport const createReview = async (reviewData: Omit<Review, 'id'>) => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('reviews')\r\n      .insert({\r\n        book_id: reviewData.bookId,\r\n        user_id: reviewData.userId,\r\n        username: reviewData.username,\r\n        rating: reviewData.rating,\r\n        comment: reviewData.comment,\r\n        author_reply: reviewData.authorReply,\r\n        reader_follow_up: reviewData.readerFollowUp,\r\n      })\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    \r\n    // Update book's review stats\r\n    const { data: reviews } = await supabase\r\n      .from('reviews')\r\n      .select('rating')\r\n      .eq('book_id', reviewData.bookId);\r\n    \r\n    if (reviews) {\r\n      const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);\r\n      const totalReviews = reviews.length;\r\n      const averageRating = totalRating / totalReviews;\r\n      \r\n      await supabase\r\n        .from('books')\r\n        .update({\r\n          total_reviews: totalReviews,\r\n          average_rating: averageRating\r\n        })\r\n        .eq('id', reviewData.bookId);\r\n    }\r\n    \r\n    return data.id;\r\n  } catch (error) {\r\n    console.error('Error creating review:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getBookReviews = async (bookId: string): Promise<Review[]> => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('reviews')\r\n      .select('*')\r\n      .eq('book_id', bookId)\r\n      .order('created_at', { ascending: false });\r\n    \r\n    if (error) throw error;\r\n    \r\n    return (data || []).map(review => ({\r\n      id: review.id,\r\n      bookId: review.book_id,\r\n      userId: review.user_id,\r\n      username: review.username,\r\n      rating: review.rating,\r\n      comment: review.comment,\r\n      createdAt: review.created_at,\r\n      authorReply: review.author_reply,\r\n      readerFollowUp: review.reader_follow_up,\r\n    } as Review));\r\n  } catch (error) {\r\n    console.error('Error getting book reviews:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateReview = async (reviewId: string, updates: Partial<Review>) => {\r\n  try {\r\n    const updateData: any = {};\r\n    if (updates.rating !== undefined) updateData.rating = updates.rating;\r\n    if (updates.comment) updateData.comment = updates.comment;\r\n    if (updates.authorReply !== undefined) updateData.author_reply = updates.authorReply;\r\n    if (updates.readerFollowUp !== undefined) updateData.reader_follow_up = updates.readerFollowUp;\r\n    \r\n    const { error } = await supabase\r\n      .from('reviews')\r\n      .update(updateData)\r\n      .eq('id', reviewId);\r\n    \r\n    if (error) throw error;\r\n  } catch (error) {\r\n    console.error('Error updating review:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Follow Management\r\nexport const followAuthor = async (readerId: string, authorId: string) => {\r\n  try {\r\n    // Check if already following\r\n    const { data: existingFollow } = await supabase\r\n      .from('follows')\r\n      .select('id')\r\n      .eq('reader_id', readerId)\r\n      .eq('author_id', authorId)\r\n      .single();\r\n    \r\n    if (existingFollow) {\r\n      throw new Error('Already following this author');\r\n    }\r\n    \r\n    const { data, error } = await supabase\r\n      .from('follows')\r\n      .insert({\r\n        reader_id: readerId,\r\n        author_id: authorId,\r\n      })\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    \r\n    // Update reader's followed authors\r\n    const { data: user } = await supabase\r\n      .from('users')\r\n      .select('followed_authors')\r\n      .eq('id', readerId)\r\n      .single();\r\n    \r\n    if (user) {\r\n      const updatedFollowedAuthors = [...(user.followed_authors || []), authorId];\r\n      await supabase\r\n        .from('users')\r\n        .update({ followed_authors: updatedFollowedAuthors })\r\n        .eq('id', readerId);\r\n    }\r\n    \r\n    return data.id;\r\n  } catch (error) {\r\n    console.error('Error following author:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const unfollowAuthor = async (readerId: string, authorId: string) => {\r\n  try {\r\n    const { error } = await supabase\r\n      .from('follows')\r\n      .delete()\r\n      .eq('reader_id', readerId)\r\n      .eq('author_id', authorId);\r\n    \r\n    if (error) throw error;\r\n    \r\n    // Update reader's followed authors\r\n    const { data: user } = await supabase\r\n      .from('users')\r\n      .select('followed_authors')\r\n      .eq('id', readerId)\r\n      .single();\r\n    \r\n    if (user) {\r\n      const updatedFollowedAuthors = (user.followed_authors || []).filter((id: string) => id !== authorId);\r\n      await supabase\r\n        .from('users')\r\n        .update({ followed_authors: updatedFollowedAuthors })\r\n        .eq('id', readerId);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error unfollowing author:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getAuthorFollowers = async (authorId: string): Promise<Follow[]> => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('follows')\r\n      .select('*')\r\n      .eq('author_id', authorId);\r\n    \r\n    if (error) throw error;\r\n    \r\n    return (data || []).map(follow => ({\r\n      id: follow.id,\r\n      readerId: follow.reader_id,\r\n      authorId: follow.author_id,\r\n      followedAt: follow.followed_at,\r\n    } as Follow));\r\n  } catch (error) {\r\n    console.error('Error getting author followers:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Check if user has purchased a book\r\nexport const hasUserPurchasedBook = async (userId: string, bookId: string): Promise<boolean> => {\r\n  try {\r\n    const user = await getUserById(userId);\r\n    return user?.purchasedBooks?.includes(bookId) || false;\r\n  } catch (error) {\r\n    console.error('Error checking book purchase:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Analytics\r\nexport const getAuthorAnalytics = async (authorId: string): Promise<AuthorAnalytics | null> => {\r\n  try {\r\n    // For Supabase, we'll calculate analytics on demand from the users table\r\n    const { data: user, error } = await supabase\r\n      .from('users')\r\n      .select('total_books, total_sales, total_revenue')\r\n      .eq('id', authorId)\r\n      .single();\r\n    \r\n    if (error && error.code !== 'PGRST116') throw error;\r\n    if (!user) return null;\r\n    \r\n    // Get additional analytics from books table\r\n    const { data: books } = await supabase\r\n      .from('books')\r\n      .select('sales, revenue, average_rating')\r\n      .eq('author_id', authorId);\r\n    \r\n    const topBook = books?.reduce((prev, current) => \r\n      (prev.sales > current.sales) ? prev : current\r\n    );\r\n    \r\n    return {\r\n      authorId,\r\n      totalBooks: user.total_books || 0,\r\n      totalSales: user.total_sales || 0,\r\n      totalRevenue: user.total_revenue || 0,\r\n      averageRating: books?.reduce((sum, book) => sum + (book.average_rating || 0), 0) / (books?.length || 1) || 0,\r\n      topSellingBook: topBook ? {\r\n        title: '', // We'd need to join with book details\r\n        sales: topBook.sales || 0\r\n      } : undefined,\r\n      monthlyStats: [], // This would require more complex queries\r\n      lastUpdated: new Date().toISOString(),\r\n    } as AuthorAnalytics;\r\n  } catch (error) {\r\n    console.error('Error getting author analytics:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateAuthorAnalytics = async (authorId: string, updates: Partial<AuthorAnalytics>) => {\r\n  try {\r\n    // In Supabase, we update the user record directly\r\n    const updateData: any = {};\r\n    if (updates.totalBooks !== undefined) updateData.total_books = updates.totalBooks;\r\n    if (updates.totalSales !== undefined) updateData.total_sales = updates.totalSales;\r\n    if (updates.totalRevenue !== undefined) updateData.total_revenue = updates.totalRevenue;\r\n    \r\n    if (Object.keys(updateData).length > 0) {\r\n      updateData.updated_at = new Date().toISOString();\r\n      \r\n      const { error } = await supabase\r\n        .from('users')\r\n        .update(updateData)\r\n        .eq('id', authorId);\r\n      \r\n      if (error) throw error;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating author analytics:', error);\r\n    throw error;\r\n  }\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 828, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/rajde/OneDrive/Desktop/Book_Store_Management/src/lib/auth.ts"],"sourcesContent":["import { supabase, isSupabaseConfigured } from './supabase';\r\nimport { createUser, getUserByEmail } from './database';\r\nimport { User, UserRole, AuthUser } from './types';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport { AuthError, User as SupabaseUser } from '@supabase/supabase-js';\r\n\r\n// Register a new user\r\nexport const registerUser = async (\r\n  email: string, \r\n  password: string, \r\n  firstName: string, \r\n  lastName: string, \r\n  role: UserRole\r\n): Promise<AuthUser> => {\r\n  try {\r\n    // Check if Supabase is configured\r\n    if (!isSupabaseConfigured) {\r\n      // For development without Supabase, simulate user creation\r\n      console.warn('Supabase not configured. Using mock authentication.');\r\n      \r\n      // Check if user already exists (mock)\r\n      const existingUser = await getUserByEmail(email);\r\n      if (existingUser) {\r\n        throw new Error('User with this email already exists');\r\n      }\r\n\r\n      // Create mock user\r\n      const mockUserId = `mock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n      const hashedPassword = await bcrypt.hash(password, 12);\r\n      \r\n      const userData: Omit<User, 'id'> = {\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        password: hashedPassword,\r\n        role,\r\n        createdAt: new Date(),\r\n        isActive: true,\r\n      };\r\n\r\n      await createUser(userData);\r\n\r\n      return {\r\n        uid: mockUserId,\r\n        email,\r\n        role,\r\n        firstName,\r\n        lastName,\r\n      };\r\n    }\r\n\r\n    // Check if user already exists\r\n    const existingUser = await getUserByEmail(email);\r\n    if (existingUser) {\r\n      throw new Error('User with this email already exists');\r\n    }\r\n\r\n    // Create user with Supabase Auth\r\n    const { data: authData, error: authError } = await supabase.auth.signUp({\r\n      email,\r\n      password,\r\n      options: {\r\n        data: {\r\n          first_name: firstName,\r\n          last_name: lastName,\r\n          role: role,\r\n        }\r\n      }\r\n    });\r\n\r\n    if (authError) throw authError;\r\n    if (!authData.user) throw new Error('Failed to create user');\r\n\r\n    // Hash password for database storage\r\n    const hashedPassword = await bcrypt.hash(password, 12);\r\n\r\n    // Create user document in Supabase database\r\n    const userData: Omit<User, 'id'> = {\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      password: hashedPassword,\r\n      role,\r\n      createdAt: new Date(),\r\n      isActive: true,\r\n    };\r\n\r\n    await createUser(userData);\r\n\r\n    return {\r\n      uid: authData.user.id,\r\n      email: authData.user.email!,\r\n      role,\r\n      firstName,\r\n      lastName,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error registering user:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Sign in user\r\nexport const signInUser = async (email: string, password: string): Promise<AuthUser> => {\r\n  try {\r\n    // Get user from database to check role and status\r\n    const user = await getUserByEmail(email);\r\n    if (!user) {\r\n      throw new Error('User not found');\r\n    }\r\n\r\n    if (!user.isActive) {\r\n      throw new Error('Account is deactivated');\r\n    }\r\n\r\n    // Verify password\r\n    const isPasswordValid = await bcrypt.compare(password, user.password);\r\n    if (!isPasswordValid) {\r\n      throw new Error('Invalid password');\r\n    }\r\n\r\n    // If Supabase is configured, sign in with Supabase Auth\r\n    if (isSupabaseConfigured) {\r\n      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password,\r\n      });\r\n\r\n      if (authError) {\r\n        console.warn('Supabase auth error:', authError.message);\r\n        // Continue with mock auth if Supabase fails\r\n      } else if (authData.user) {\r\n        return {\r\n          uid: authData.user.id,\r\n          email: authData.user.email!,\r\n          role: user.role,\r\n          firstName: user.firstName,\r\n          lastName: user.lastName,\r\n        };\r\n      }\r\n    }\r\n\r\n    // Mock authentication for development\r\n    console.warn('Using mock authentication.');\r\n    const mockUserId = `mock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    return {\r\n      uid: mockUserId,\r\n      email: user.email,\r\n      role: user.role,\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error signing in user:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Sign out user\r\nexport const signOutUser = async (): Promise<void> => {\r\n  try {\r\n    if (isSupabaseConfigured) {\r\n      const { error } = await supabase.auth.signOut();\r\n      if (error) throw error;\r\n    } else {\r\n      console.warn('Using mock sign out.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error signing out user:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get current user session\r\nexport const getCurrentUser = async (): Promise<SupabaseUser | null> => {\r\n  try {\r\n    const { data: { user }, error } = await supabase.auth.getUser();\r\n    if (error) throw error;\r\n    return user;\r\n  } catch (error) {\r\n    console.error('Error getting current user:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Generate JWT token\r\nexport const generateJWTToken = (user: AuthUser): string => {\r\n  const payload = {\r\n    uid: user.uid,\r\n    email: user.email,\r\n    role: user.role,\r\n    firstName: user.firstName,\r\n    lastName: user.lastName,\r\n  };\r\n\r\n  return jwt.sign(payload, process.env.JWT_SECRET!, {\r\n    expiresIn: '24h',\r\n  });\r\n};\r\n\r\n// Verify JWT token\r\nexport const verifyJWTToken = (token: string): AuthUser => {\r\n  try {\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as AuthUser;\r\n    return decoded;\r\n  } catch (error) {\r\n    throw new Error('Invalid token');\r\n  }\r\n};\r\n\r\n// Auth state listener using Supabase\r\nexport const onAuthStateChange = (callback: (user: SupabaseUser | null) => void) => {\r\n  if (!isSupabaseConfigured) {\r\n    // Mock implementation for development\r\n    console.warn('Supabase not configured. Using mock auth state listener.');\r\n    \r\n    // Return a mock unsubscribe function\r\n    return () => {\r\n      console.log('Mock auth state listener unsubscribed');\r\n    };\r\n  }\r\n\r\n  const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\r\n    callback(session?.user || null);\r\n  });\r\n\r\n  // Return unsubscribe function\r\n  return () => {\r\n    subscription.unsubscribe();\r\n  };\r\n};\r\n\r\n// Validate password strength\r\nexport const validatePassword = (password: string): boolean => {\r\n  // At least 8 characters, 1 uppercase, 1 lowercase, 1 number\r\n  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d@$!%*?&]{8,}$/;\r\n  return passwordRegex.test(password);\r\n};\r\n\r\n// Validate email format\r\nexport const validateEmail = (email: string): boolean => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n// Hash password\r\nexport const hashPassword = async (password: string): Promise<string> => {\r\n  return await bcrypt.hash(password, 12);\r\n};\r\n\r\n// Compare password\r\nexport const comparePassword = async (password: string, hashedPassword: string): Promise<boolean> => {\r\n  return await bcrypt.compare(password, hashedPassword);\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1055, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/rajde/OneDrive/Desktop/Book_Store_Management/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { signInUser, generateJWTToken, validateEmail } from '@/lib/auth';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { email, password } = body;\r\n\r\n    // Validate input\r\n    if (!email || !password) {\r\n      return NextResponse.json(\r\n        { error: 'Email and password are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validate email format\r\n    if (!validateEmail(email)) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid email format' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Sign in user\r\n    const user = await signInUser(email, password);\r\n\r\n    // Generate JWT token\r\n    const token = generateJWTToken(user);\r\n\r\n    // Set HTTP-only cookie\r\n    const response = NextResponse.json({\r\n      message: 'Login successful',\r\n      user: {\r\n        uid: user.uid,\r\n        email: user.email,\r\n        role: user.role,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n      }\r\n    }, { status: 200 });\r\n\r\n    // Set secure cookie\r\n    response.cookies.set('auth-token', token, {\r\n      httpOnly: true,\r\n      secure: process.env.NODE_ENV === 'production',\r\n      sameSite: 'strict',\r\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\r\n      path: '/',\r\n    });\r\n\r\n    return response;\r\n\r\n  } catch (error: any) {\r\n    console.error('Login error:', error);\r\n    \r\n    if (error.message === 'User not found') {\r\n      return NextResponse.json(\r\n        { error: 'Invalid email or password' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    if (error.message === 'Account is deactivated') {\r\n      return NextResponse.json(\r\n        { error: 'Account is deactivated. Please contact support.' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    if (error.code === 'auth/wrong-password' || error.code === 'auth/user-not-found') {\r\n      return NextResponse.json(\r\n        { error: 'Invalid email or password' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { error: 'Login failed. Please try again.' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;QAE5B,iBAAiB;QACjB,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,wBAAwB;QACxB,IAAI,CAAC,CAAA,GAAA,oHAAA,CAAA,gBAAa,AAAD,EAAE,QAAQ;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,eAAe;QACf,MAAM,OAAO,MAAM,CAAA,GAAA,oHAAA,CAAA,aAAU,AAAD,EAAE,OAAO;QAErC,qBAAqB;QACrB,MAAM,QAAQ,CAAA,GAAA,oHAAA,CAAA,mBAAgB,AAAD,EAAE;QAE/B,uBAAuB;QACvB,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACjC,SAAS;YACT,MAAM;gBACJ,KAAK,KAAK,GAAG;gBACb,OAAO,KAAK,KAAK;gBACjB,MAAM,KAAK,IAAI;gBACf,WAAW,KAAK,SAAS;gBACzB,UAAU,KAAK,QAAQ;YACzB;QACF,GAAG;YAAE,QAAQ;QAAI;QAEjB,oBAAoB;QACpB,SAAS,OAAO,CAAC,GAAG,CAAC,cAAc,OAAO;YACxC,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;YACV,QAAQ,KAAK,KAAK,KAAK;YACvB,MAAM;QACR;QAEA,OAAO;IAET,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,gBAAgB;QAE9B,IAAI,MAAM,OAAO,KAAK,kBAAkB;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,MAAM,OAAO,KAAK,0BAA0B;YAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkD,GAC3D;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,MAAM,IAAI,KAAK,yBAAyB,MAAM,IAAI,KAAK,uBAAuB;YAChF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAkC,GAC3C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}